// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const STORAGE_KEY = 'orders';
const STATUS_ICONS = {
    '–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ': 'üü°',
    '–∑–∞–≤–µ—Ä—à–µ–Ω': 'üü¢',
    '–æ—Ç–º–µ–Ω–µ–Ω': 'üî¥'
};

// –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç
const THEME_KEY = 'theme';

// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
const COLUMNS_ORDER_KEY = 'columnsOrder';

// –î–æ–±–∞–≤–∏–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
const FILTERS_STATE_KEY = 'filtersState';

// –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏
class OrdersManager {
    constructor() {
        try {
            // –ò–∑–º–µ–Ω—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞
            this.orders = [];
            this.columnsOrder = [];
            this.lastSaveTime = new Date();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
            this.loadFromDataFile();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            this.initComponents();
            
            // –†–µ–Ω–¥–µ—Ä–∏–º —Ç–∞–±–ª–∏—Ü—É
            this.renderTable();
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            this.restoreState();

            this.history = [];
            this.currentIndex = -1;
            this.initUndoRedo();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ OrdersManager:', error);
            throw error;
        }
    }

    initComponents() {
        this.initEventListeners();
        this.initAutoSave();
        this.createSaveStatusIndicator();
    }

    restoreState() {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –∫–æ–ª–æ–Ω–æ–∫
        setTimeout(() => {
            this.applyColumnsOrder();
        }, 0);

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        this.restoreFiltersState();
    }

    loadOrders() {
        return JSON.parse(localStorage.getItem(STORAGE_KEY)) || [];
    }

    saveOrders() {
        try {
            localStorage.setItem(STORAGE_KEY, JSON.stringify(this.orders));
            this.updateSaveStatus('–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:', error);
            this.updateSaveStatus('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è', 'error');
        }
    }

    addOrder(order) {
        this.addToHistory(() => {
            this.orders.push(order);
            this.saveOrders();
            this.renderTable();
        });
    }

    updateOrder(index, newOrder) {
        this.addToHistory(() => {
            this.orders[index] = newOrder;
            this.saveOrders();
            this.renderTable();
        });
    }

    deleteOrder(index) {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞—è–≤–∫—É?')) {
            this.addToHistory(() => {
                this.orders.splice(index, 1);
                this.saveOrders();
                this.renderTable();
            });
        }
    }

    copyOrder(index) {
        const newOrder = { ...this.orders[index] };
        this.addOrder(newOrder);
    }

    getFormData() {
        const form = document.getElementById('orderForm');
        const formData = {
            author: form.author.value,
            material: form.material.value,
            quantity: form.quantity.value,
            unit: form.unit.value,
            category: form.category.value,
            supplier: form.supplier.value,
            address: form.address.value,
            phone: form.phone.value,
            email: form.email.value,
            status: form.status.value,
            orderDate: form.orderDate.value,
            paymentDeadline: form.paymentDeadline.value,
            paymentDate: form.paymentDate.value,
            deliveryDate: form.deliveryDate.value,
            deliveryType: form.deliveryType.value,
            amount: form.amount.value,
            paymentStatus: form.paymentStatus.value,
            notes: form.notes.value,
            responsible: form.responsible.value,
            link: form.link.value,
            priority: form.priority.value
        };
        return formData;
    }

    setFormData(order) {
        const form = document.getElementById('orderForm');
        Object.entries(order).forEach(([key, value]) => {
            if (form[key]) form[key].value = value || '';
        });
    }

    editOrder(index) {
        const order = this.orders[index];
        this.setFormData(order);
        document.getElementById('editIndex').value = index;
        document.getElementById('formTitle').textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É';
        this.openForm();
    }

    openForm() {
        const dialog = document.getElementById('addOrderForm');
        dialog.showModal();
    }

    closeForm() {
        const dialog = document.getElementById('addOrderForm');
        dialog.close();
        this.clearForm();
    }

    clearForm() {
        document.getElementById('orderForm').reset();
        document.getElementById('editIndex').value = '-1';
        document.getElementById('formTitle').textContent = '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É';
    }

    createTableCells(order, index) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–ª–æ–Ω–æ–∫
        const columns = [
            { key: 'index', label: '–ü/–ü', type: 'text' },
            { key: 'status', label: '–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞', type: 'select' },
            { key: 'author', label: '–ê–≤—Ç–æ—Ä –∑–∞—è–≤–∫–∏', type: 'text' },
            { key: 'material', label: '–ú–∞—Ç–µ—Ä–∏–∞–ª', type: 'text' },
            { key: 'priority', label: '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç', type: 'select' },
            { key: 'quantity', label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', type: 'number' },
            { key: 'unit', label: '–ï–¥. –∏–∑–º.', type: 'text' },
            { key: 'category', label: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞', type: 'text' },
            { key: 'supplier', label: '–ü–æ—Å—Ç–∞–≤—â–∏–∫', type: 'text' },
            { key: 'phone', label: '–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞', type: 'tel' },
            { key: 'email', label: 'Email –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞', type: 'email' },
            { key: 'orderDate', label: '–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞', type: 'date' },
            { key: 'paymentDate', label: '–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã', type: 'date' },
            { key: 'deliveryDate', label: '–î–∞—Ç–∞ –ø—Ä–∏–≤–æ–∑–∞', type: 'date' },
            { key: 'deliveryType', label: '–í–∏–¥ –¥–æ—Å—Ç–∞–≤–∫–∏', type: 'select' },
            { key: 'amount', label: '–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞', type: 'number' },
            { key: 'paymentStatus', label: '–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø–ª–∞—Ç—ã', type: 'select' },
            { key: 'notes', label: '–ü—Ä–∏–º–µ—á–∞–Ω–∏—è', type: 'text' },
            { key: 'responsible', label: '–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ª–∏—Ü–æ', type: 'text' },
            { key: 'link', label: '–°—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã', type: 'url' }
        ];

        // –û–ø—Ü–∏–∏ –¥–ª—è select –ø–æ–ª–µ–π
        const selectOptions = {
            status: ['üü° –í –ø—Ä–æ—Ü–µ—Å—Å–µ', 'üü¢ –ó–∞–≤–µ—Ä—à–µ–Ω', 'üî¥ –û—Ç–º–µ–Ω–µ–Ω'],
            priority: ['–í—ã—Å–æ–∫–∏–π', '–°—Ä–µ–¥–Ω–∏–π', '–ù–∏–∑–∫–∏–π'],
            deliveryType: ['–°–∞–º–æ–≤—ã–≤–æ–∑', '–î–æ—Å—Ç–∞–≤–∫–∞'],
            paymentStatus: ['–û–ø–ª–∞—á–µ–Ω–æ', '–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ']
        };

        return columns.map(column => {
            let value = column.key === 'index' ? (index + 1) : (order[column.key] || '');
            
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å—Å—ã–ª–æ–∫
            if (column.type === 'url' && value) {
                return `<td class="editable" data-type="${column.type}" data-key="${column.key}">
                    <span class="cell-value"><a href="${value}" target="_blank">–°—Å—ã–ª–∫–∞</a></span>
                    <input type="text" class="cell-editor" style="display: none" value="${value}">
                </td>`;
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ select –ø–æ–ª–µ–π
            if (column.type === 'select') {
                return `<td class="editable" data-type="${column.type}" data-key="${column.key}">
                    <span class="cell-value">${value}</span>
                    <select class="cell-editor" style="display: none">
                        ${selectOptions[column.key]?.map(opt => 
                            `<option value="${opt}" ${opt === value ? 'selected' : ''}>${opt}</option>`
                        ).join('')}
                    </select>
                </td>`;
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            return `<td class="editable" data-type="${column.type}" data-key="${column.key}">
                <span class="cell-value">${value}</span>
                <input type="${column.type}" class="cell-editor" style="display: none" value="${value}">
            </td>`;
        }).join('');
    }

    initEventListeners() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å–ª—É—à–∞—Ç–µ–ª–µ–π
        const form = document.getElementById('orderForm');
        if (form) {
            form.addEventListener('submit', (e) => {
                e.preventDefault();
                window.saveOrder();
            });
        }

        const table = document.getElementById('ordersTable');
        if (table) {
            table.addEventListener('click', (e) => {
                const target = e.target;
                if (target.matches('[data-action]')) {
                    const action = target.dataset.action;
                    const index = parseInt(target.closest('tr').dataset.index);
                    
                    switch(action) {
                        case 'edit': this.editOrder(index); break;
                        case 'delete': this.deleteOrder(index); break;
                        case 'copy': this.copyOrder(index); break;
                    }
                }
            });
        }

        const filterStatus = document.getElementById('filterStatus');
        const filterPriority = document.getElementById('filterPriority');
        const searchInput = document.getElementById('searchInput');

        if (filterStatus) {
            filterStatus.addEventListener('change', () => this.applyFilters());
        }
        if (filterPriority) {
            filterPriority.addEventListener('change', () => this.applyFilters());
        }
        if (searchInput) {
            searchInput.addEventListener('input', () => this.applySearch());
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
        const headerRow = document.querySelector('.header-row');
        const headers = headerRow.getElementsByTagName('th');

        Array.from(headers).forEach(header => {
            if (header.getAttribute('draggable') !== 'true') return;

            header.addEventListener('dragstart', this.handleDragStart.bind(this));
            header.addEventListener('dragover', this.handleDragOver.bind(this));
            header.addEventListener('drop', this.handleDrop.bind(this));
            header.addEventListener('dragend', this.handleDragEnd.bind(this));
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —è—á–µ–π–∫–∞—Ö
        this.initCellEditing();

        // –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        this.initHotkeys();
    }

    handleFormSubmit() {
        const formData = this.getFormData();
        const editIndex = parseInt(document.getElementById('editIndex').value);

        if (editIndex >= 0) {
            this.updateOrder(editIndex, formData);
        } else {
            this.addOrder(formData);
        }

        this.closeForm();
        this.showNotification('–ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞', 'success');
    }

    applyFilters() {
        const statusFilter = document.getElementById('filterStatus').value;
        const priorityFilter = document.getElementById('filterPriority').value;
        const searchFilter = document.getElementById('searchInput').value;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        const filtersState = {
            status: statusFilter,
            priority: priorityFilter,
            search: searchFilter
        };
        localStorage.setItem(FILTERS_STATE_KEY, JSON.stringify(filtersState));

        const rows = document.querySelectorAll('#ordersTable tbody tr');
        
        // –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –∫–æ–ª–æ–Ω–æ–∫ —Å—Ç–∞—Ç—É—Å–∞ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        const headers = Array.from(document.querySelectorAll('.header-row th'));
        const statusColumnIndex = headers.findIndex(th => th.textContent === '–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞');
        const priorityColumnIndex = headers.findIndex(th => th.textContent === '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç');

        rows.forEach(row => {
            if (row.classList.contains('group-header')) return;

            // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —è—á–µ–µ–∫, —É—á–∏—Ç—ã–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å .cell-value
            const statusCell = row.cells[statusColumnIndex]?.querySelector('.cell-value');
            const priorityCell = row.cells[priorityColumnIndex]?.querySelector('.cell-value');
            
            const status = statusCell?.textContent.trim() || '';
            const priority = priorityCell?.textContent.trim() || '';

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
            const matchesStatus = !statusFilter || status === statusFilter;
            const matchesPriority = !priorityFilter || priority === priorityFilter;

            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            row.style.display = (matchesStatus && matchesPriority) ? '' : 'none';

            // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if (!matchesStatus || !matchesPriority) {
                console.log('–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏:', {
                    status,
                    statusFilter,
                    matchesStatus,
                    priority,
                    priorityFilter,
                    matchesPriority
                });
            }
        });

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–∏—Å–∫ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        if (searchFilter) {
            this.applySearch();
        }
    }

    applySearch() {
        const searchInput = document.getElementById('searchInput');
        const searchText = searchInput.value.toLowerCase();
        
        const rows = document.querySelectorAll('#ordersTable tbody tr');

        rows.forEach(row => {
            if (row.classList.contains('group-header') || !searchText) {
                row.style.display = '';
                return;
            }

            let match = false;
            const cells = Array.from(row.cells);

            cells.forEach((cell, index) => {
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–ª–æ–Ω–∫—É –¥–µ–π—Å—Ç–≤–∏–π
                if (index === cells.length - 1) {
                    return;
                }

                const cellValue = cell.querySelector('.cell-value');
                if (cellValue) {
                    // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –ø–æ–¥—Å–≤–µ—Ç–∫—É
                    cellValue.innerHTML = cellValue.textContent;
                    
                    const text = cellValue.textContent.toLowerCase();
                    if (text.includes(searchText)) {
                        match = true;
                        // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                        cellValue.innerHTML = cellValue.textContent.replace(
                            new RegExp(searchText, 'gi'),
                            match => `<mark class="search-highlight">${match}</mark>`
                        );
                    }
                }
            });

            row.style.display = match ? '' : 'none';
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
        this.updateSearchCounter();
    }

    updateSearchCounter() {
        const visibleRows = document.querySelectorAll('#ordersTable tbody tr:not([style*="display: none"])').length;
        const totalRows = document.querySelectorAll('#ordersTable tbody tr').length;
        const counterElement = document.getElementById('searchCounter');
        
        if (counterElement) {
            counterElement.textContent = `–ù–∞–π–¥–µ–Ω–æ: ${visibleRows} –∏–∑ ${totalRows}`;
        }
    }

    exportToExcel() {
        ExcelExporter.export(this.orders);
    }

    renderTable() {
        const tbody = document.querySelector('#ordersTable tbody');
        tbody.innerHTML = '';
        
        this.orders.forEach((order, index) => {
            const row = tbody.insertRow();
            row.dataset.index = index;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
            if (order.priority === '–í—ã—Å–æ–∫–∏–π') {
                row.classList.add('priority-high');
            } else if (order.priority === '–°—Ä–µ–¥–Ω–∏–π') {
                row.classList.add('priority-medium');
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º —è—á–µ–π–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
            row.innerHTML = this.createTableCells(order, index);
            
            // –î–æ–±–∞–≤–ª—è–µ–º —è—á–µ–π–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
            const actionsCell = row.insertCell();
            actionsCell.className = 'actions-cell';
            actionsCell.innerHTML = `
                <button class="btn primary" onclick="window.ordersManager.editOrder(${index})">‚úèÔ∏è</button>
                <button class="btn danger" onclick="window.ordersManager.deleteOrder(${index})">üóëÔ∏è</button>
                <button class="btn secondary" onclick="window.ordersManager.copyOrder(${index})">üìã</button>
            `;
        });
    }

    sortTable(columnIndex) {
        const tbody = document.querySelector('#ordersTable tbody');
        const rows = Array.from(tbody.rows);
        
        rows.sort((a, b) => {
            const aValue = a.cells[columnIndex].textContent.toLowerCase();
            const bValue = b.cells[columnIndex].textContent.toLowerCase();
            
            if (!isNaN(aValue) && !isNaN(bValue)) {
                return parseFloat(aValue) - parseFloat(bValue);
            }
            return aValue.localeCompare(bValue);
        });
        
        rows.forEach(row => tbody.appendChild(row));
    }

    saveToFile() {
        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∏ –ø–æ—Ä—è–¥–∫–æ–º –∫–æ–ª–æ–Ω–æ–∫
        const saveData = {
            orders: this.orders,
            columnsOrder: this.columnsOrder
        };
        
        const data = JSON.stringify(saveData, null, 2);
        const blob = new Blob([data], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        
        const a = document.createElement('a');
        a.href = url;
        a.download = `orders_${new Date().toISOString().split('T')[0]}.json`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    }

    loadFromFile(file) {
        const reader = new FileReader();
        reader.onload = (e) => {
            try {
                if (!e.target.result) {
                    alert('–§–∞–π–ª –ø—É—Å—Ç');
                    return;
                }

                let data;
                try {
                    data = JSON.parse(e.target.result);
                } catch (parseError) {
                    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ —Ñ–∞–π–ª–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π JSON —Ñ–∞–π–ª.');
                    console.error('Parse error:', parseError);
                    return;
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
                if (data.orders && Array.isArray(data.orders)) {
                    // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –ø–æ—Ä—è–¥–∫–æ–º –∫–æ–ª–æ–Ω–æ–∫
                    if (confirm('–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–º–µ–Ω–∏—Ç —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?')) {
                        this.orders = data.orders;
                        if (data.columnsOrder) {
                            this.columnsOrder = data.columnsOrder;
                            localStorage.setItem(COLUMNS_ORDER_KEY, JSON.stringify(data.columnsOrder));
                        }
                        this.saveOrders();
                        this.renderTable();
                        this.applyColumnsOrder();
                        alert('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!');
                    }
                } else if (Array.isArray(data)) {
                    // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç, —Ç–æ–ª—å–∫–æ –∑–∞—è–≤–∫–∏
                    if (confirm('–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–º–µ–Ω–∏—Ç —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?')) {
                        this.orders = data;
                        this.saveOrders();
                        this.renderTable();
                        alert('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!');
                    }
                } else {
                    alert('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö');
                    return;
                }
            } catch (error) {
                alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: ' + error.message);
                console.error('Load error:', error);
            }
        };

        reader.onerror = (error) => {
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: ' + error);
            console.error('Reader error:', error);
        };

        reader.readAsText(file);
    }

    handleDragStart(e) {
        const th = e.target;
        th.classList.add('dragging');
        e.dataTransfer.setData('text/plain', th.cellIndex);
    }

    handleDragOver(e) {
        e.preventDefault();
        const th = e.target.closest('th');
        if (th) {
            th.classList.add('drag-over');
        }
    }

    handleDrop(e) {
        e.preventDefault();
        const th = e.target.closest('th');
        if (!th) return;

        const fromIndex = parseInt(e.dataTransfer.getData('text/plain'));
        const toIndex = th.cellIndex;

        if (fromIndex !== toIndex) {
            this.moveColumn(fromIndex, toIndex);
        }
        
        th.classList.remove('drag-over');
    }

    handleDragEnd(e) {
        const headers = document.querySelectorAll('.header-row th');
        headers.forEach(header => {
            header.classList.remove('dragging');
            header.classList.remove('drag-over');
        });
    }

    moveColumn(fromIndex, toIndex, saveOrder = true) {
        const table = document.getElementById('ordersTable');
        const rows = Array.from(table.rows);

        if (fromIndex === toIndex) return;

        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —è—á–µ–π–∫–∏ –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ
        rows.forEach(row => {
            const cells = Array.from(row.cells);
            const [cell] = cells.splice(fromIndex, 1);
            cells.splice(toIndex, 0, cell);
            
            row.innerHTML = '';
            cells.forEach(c => row.appendChild(c));
        });

        if (saveOrder) {
            this.updateColumnsOrder();
        }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–æ–¥ updateColumnsOrder
    updateColumnsOrder() {
        const headers = Array.from(document.querySelectorAll('.header-row th'));
        // –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–æ–ª–æ–Ω–∫—É (–¥–µ–π—Å—Ç–≤–∏—è)
        const dataHeaders = headers.slice(0, -1);
        const order = dataHeaders.map(th => th.getAttribute('data-original-index'));
        localStorage.setItem(COLUMNS_ORDER_KEY, JSON.stringify(order));
        this.columnsOrder = order;

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        dataHeaders.forEach((th, index) => {
            th.setAttribute('onclick', `sortTable(${index})`);
        });
    }

    // –ú–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Ä—è–¥–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
    loadColumnsOrder() {
        const savedOrder = localStorage.getItem(COLUMNS_ORDER_KEY);
        if (savedOrder) {
            try {
                const order = JSON.parse(savedOrder);
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Ä—è–¥–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω–¥–µ–∫—Å—ã
                const expectedLength = document.querySelectorAll('.header-row th').length - 1; // -1 –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
                const hasAllIndices = Array.from({ length: expectedLength }, (_, i) => i)
                    .every(index => order.includes(index.toString()));
                
                if (hasAllIndices) {
                    return order;
                }
            } catch (e) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Ä—è–¥–∫–∞ –∫–æ–ª–æ–Ω–æ–∫:', e);
            }
        }
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –∫–æ–ª–æ–Ω–æ–∫
        return Array.from({ length: document.querySelectorAll('.header-row th').length - 1 }, (_, i) => i.toString());
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–æ–¥ applyColumnsOrder
    applyColumnsOrder() {
        const savedOrder = this.columnsOrder;
        if (!savedOrder || !Array.isArray(savedOrder)) return;

        const table = document.getElementById('ordersTable');
        const headers = Array.from(table.querySelectorAll('.header-row th'));
        
        // –ò—Å–∫–ª—é—á–∞–µ–º –∫–æ–ª–æ–Ω–∫—É –¥–µ–π—Å—Ç–≤–∏–π –∏–∑ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
        const dataHeaders = headers.slice(0, -1);
        
        if (savedOrder.length !== dataHeaders.length) {
            console.warn('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—É—â–∏–º');
            return;
        }

        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–π
        const currentOrder = dataHeaders.map(th => th.getAttribute('data-original-index'));
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
        savedOrder.forEach((targetIndex, newIndex) => {
            const currentIndex = currentOrder.indexOf(targetIndex);
            if (currentIndex !== newIndex) {
                // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫–æ–ª–æ–Ω–∫—É
                this.moveColumn(currentIndex, newIndex, false);
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ—Ä—è–¥–æ–∫
                const [moved] = currentOrder.splice(currentIndex, 1);
                currentOrder.splice(newIndex, 0, moved);
            }
        });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —è—á–µ–π–∫–µ
    initCellEditing() {
        const tbody = document.querySelector('#ordersTable tbody');
        
        tbody.addEventListener('dblclick', (e) => {
            const cell = e.target.closest('.editable');
            if (!cell) return;
            
            this.startEditing(cell);
        });

        tbody.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                this.stopEditing(false);
            } else if (e.key === 'Enter' && !e.shiftKey) {
                this.stopEditing(true);
            }
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –≤–Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–π —è—á–µ–π–∫–∏
        document.addEventListener('click', (e) => {
            if (!e.target.closest('.cell-editor')) {
                this.stopEditing(true);
            }
        });
    }

    startEditing(cell) {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        this.stopEditing(true);

        const editor = cell.querySelector('.cell-editor');
        const display = cell.querySelector('.cell-value');
        
        if (editor && display) {
            display.style.display = 'none';
            editor.style.display = '';
            editor.focus();
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–∫—É—â—É—é —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—É—é —è—á–µ–π–∫—É
            this.currentEditCell = cell;
        }
    }

    stopEditing(save) {
        if (!this.currentEditCell) return;

        const editor = this.currentEditCell.querySelector('.cell-editor');
        const display = this.currentEditCell.querySelector('.cell-value');
        
        if (editor && display) {
            if (save) {
                const newValue = editor.value;
                display.textContent = newValue;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ orders
                const row = this.currentEditCell.closest('tr');
                const rowIndex = row.dataset.index;
                const key = this.currentEditCell.dataset.key;
                
                if (rowIndex !== undefined && key) {
                    this.orders[rowIndex][key] = newValue;
                    this.saveOrders();
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
                    if (key === 'priority') {
                        row.className = ''; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–ª–∞—Å—Å—ã
                        if (newValue === '–í—ã—Å–æ–∫–∏–π') {
                            row.classList.add('priority-high');
                        } else if (newValue === '–°—Ä–µ–¥–Ω–∏–π') {
                            row.classList.add('priority-medium');
                        }
                    }
                }
            }
            
            editor.style.display = 'none';
            display.style.display = '';
        }
        
        this.currentEditCell = null;
    }

    // –î–æ–±–∞–≤–∏–º –º–µ—Ç–æ–¥ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    groupData(groupBy) {
        const groups = {};
        this.orders.forEach(order => {
            const key = order[groupBy] || '–ë–µ–∑ –≥—Ä—É–ø–ø—ã';
            if (!groups[key]) {
                groups[key] = [];
            }
            groups[key].push(order);
        });
        return groups;
    }

    // –î–æ–±–∞–≤–∏–º –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    renderGroupedTable(groupBy) {
        const tbody = document.querySelector('#ordersTable tbody');
        tbody.innerHTML = '';
        
        const groups = this.groupData(groupBy);
        Object.entries(groups).forEach(([groupName, orders]) => {
            // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É-–∑–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä—É–ø–ø—ã
            const groupRow = tbody.insertRow();
            groupRow.className = 'group-header';
            groupRow.innerHTML = `
                <td colspan="21">
                    <div class="group-header-content">
                        <span>${groupName} (${orders.length})</span>
                        <button class="btn secondary toggle-group">‚ñº</button>
                    </div>
                </td>
            `;
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
            orders.forEach((order, index) => {
                const row = tbody.insertRow();
                row.className = 'group-content';
                row.dataset.index = this.orders.indexOf(order);
                // ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏
            });
        });
    }

    // –î–æ–±–∞–≤–∏–º –º–µ—Ç–æ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    getStatistics() {
        return {
            total: this.orders.length,
            byStatus: this.getCountByField('status'),
            byPriority: this.getCountByField('priority'),
            averageAmount: this.getAverageAmount(),
            completionRate: this.getCompletionRate()
        };
    }

    getCountByField(field) {
        return this.orders.reduce((acc, order) => {
            const value = order[field] || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
            acc[value] = (acc[value] || 0) + 1;
            return acc;
        }, {});
    }

    renderStatistics() {
        const stats = this.getStatistics();
        // –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    }

    validateOrder(order) {
        const errors = [];
        
        // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        const required = ['author', 'material', 'quantity'];
        required.forEach(field => {
            if (!order[field]) {
                errors.push(`–ü–æ–ª–µ "${field}" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è`);
            }
        });
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ email
        if (order.email && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(order.email)) {
            errors.push('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email');
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        if (order.quantity && (isNaN(order.quantity) || order.quantity <= 0)) {
            errors.push('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º');
        }
        
        return errors;
    }

    // –î–æ–±–∞–≤–∏–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    addChangeHistory(order, field, oldValue, newValue) {
        if (!order.history) {
            order.history = [];
        }
        
        order.history.push({
            field,
            oldValue,
            newValue,
            date: new Date().toISOString(),
            user: '–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        });
    }

    // –ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    showHistory(orderIndex) {
        const order = this.orders[orderIndex];
        if (!order.history) return;
        
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∏—Å—Ç–æ—Ä–∏–µ–π
        const dialog = document.createElement('dialog');
        dialog.className = 'history-modal';
        dialog.innerHTML = `
            <h3>–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π</h3>
            <div class="history-list">
                ${order.history.map(change => `
                    <div class="history-item">
                        <div>–ü–æ–ª–µ: ${change.field}</div>
                        <div>–°—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${change.oldValue}</div>
                        <div>–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${change.newValue}</div>
                        <div>–î–∞—Ç–∞: ${new Date(change.date).toLocaleString()}</div>
                    </div>
                `).join('')}
            </div>
            <button onclick="this.closest('dialog').close()">–ó–∞–∫—Ä—ã—Ç—å</button>
        `;
        document.body.appendChild(dialog);
        dialog.showModal();
    }

    initHotkeys() {
        document.addEventListener('keydown', (e) => {
            // Ctrl/Cmd + N - –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞
            if ((e.ctrlKey || e.metaKey) && e.key === 'n') {
                e.preventDefault();
                this.openForm();
            }
            
            // Ctrl/Cmd + S - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª
            if ((e.ctrlKey || e.metaKey) && e.key === 's') {
                e.preventDefault();
                this.saveToFile();
            }
            
            // Ctrl/Cmd + F - –ø–æ–∏—Å–∫
            if ((e.ctrlKey || e.metaKey) && e.key === 'f') {
                e.preventDefault();
                document.getElementById('searchInput').focus();
            }
        });
    }

    showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.textContent = message;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.remove();
        }, 3000);
    }

    exportToPDF() {
        const doc = new jsPDF();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        doc.setFontSize(16);
        doc.text('–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', 14, 15);
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        const tableData = this.orders.map(order => [
            order.status,
            order.author,
            order.material,
            // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
        ]);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
        doc.autoTable({
            head: [['–°—Ç–∞—Ç—É—Å', '–ê–≤—Ç–æ—Ä', '–ú–∞—Ç–µ—Ä–∏–∞–ª', /* ... */]],
            body: tableData,
            startY: 25
        });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        doc.save('orders.pdf');
    }

    // –û–±–Ω–æ–≤–∏–º –º–µ—Ç–æ–¥ resetFilters
    resetFilters() {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        document.getElementById('filterStatus').value = '';
        document.getElementById('filterPriority').value = '';
        document.getElementById('searchInput').value = '';
        
        // –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        localStorage.removeItem(FILTERS_STATE_KEY);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏
        const rows = document.querySelectorAll('#ordersTable tbody tr');
        rows.forEach(row => {
            if (!row.classList.contains('group-header')) {
                row.style.display = '';
            }
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        this.showNotification('–§–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã', 'info');
    }

    // –î–æ–±–∞–≤–∏–º –º–µ—Ç–æ–¥ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
    restoreFiltersState() {
        const savedState = localStorage.getItem(FILTERS_STATE_KEY);
        if (savedState) {
            try {
                const filters = JSON.parse(savedState);
                
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
                document.getElementById('filterStatus').value = filters.status || '';
                document.getElementById('filterPriority').value = filters.priority || '';
                document.getElementById('searchInput').value = filters.search || '';
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
                if (filters.status || filters.priority || filters.search) {
                    this.applyFilters();
                }
            } catch (e) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤:', e);
                localStorage.removeItem(FILTERS_STATE_KEY);
            }
        }
    }

    initAutoSave() {
        let saveTimeout;
        const autoSave = () => {
            clearTimeout(saveTimeout);
            this.showSavingIndicator();
            
            saveTimeout = setTimeout(() => {
                this.saveOrders();
                this.lastSaveTime = new Date();
                this.updateSaveStatus('–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
            }, 1000); // –ó–∞–¥–µ—Ä–∂–∫–∞ 1 —Å–µ–∫—É–Ω–¥–∞ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ
        document.querySelector('#ordersTable').addEventListener('input', (e) => {
            if (e.target.matches('.cell-editor')) {
                autoSave();
            }
        });

        // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–æ—Ä–º—ã
        document.querySelector('#orderForm').addEventListener('input', autoSave);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        this.createSaveStatusIndicator();
        this.updateSaveStatus('–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
    }

    createSaveStatusIndicator() {
        const statusContainer = document.createElement('div');
        statusContainer.className = 'save-status';
        statusContainer.innerHTML = `
            <span class="save-status-icon"></span>
            <span class="save-status-text"></span>
            <span class="save-status-time"></span>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤ header
        document.querySelector('.header-content').appendChild(statusContainer);
    }

    showSavingIndicator() {
        this.updateSaveStatus('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...', 'saving');
    }

    updateSaveStatus(message, status = 'saved') {
        const statusContainer = document.querySelector('.save-status');
        if (!statusContainer) return;

        const icon = statusContainer.querySelector('.save-status-icon');
        const text = statusContainer.querySelector('.save-status-text');
        const time = statusContainer.querySelector('.save-status-time');

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∏ —Ç–µ–∫—Å—Ç
        icon.textContent = status === 'saving' ? '‚è≥' : '‚úì';
        text.textContent = message;

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        if (status === 'saved') {
            const timeStr = this.lastSaveTime.toLocaleTimeString();
            time.textContent = `(${timeStr})`;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞—Å—Å—ã –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
        statusContainer.className = `save-status ${status}`;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    addToHistory(action) {
        const snapshot = this.createSnapshot();
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        action();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è
        const newSnapshot = this.createSnapshot();
        
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
        this.history = this.history.slice(0, this.currentIndex + 1);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        this.history.push({
            undo: () => this.restoreSnapshot(snapshot),
            redo: () => this.restoreSnapshot(newSnapshot)
        });
        
        this.currentIndex++;
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        if (this.history.length > 50) {
            this.history.shift();
            this.currentIndex--;
        }

        this.updateUndoRedoStatus();
    }

    // –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è
    undo() {
        if (this.currentIndex >= 0) {
            this.history[this.currentIndex].undo();
            this.currentIndex--;
            this.showNotification('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', 'info');
            this.updateUndoRedoStatus();
        }
    }

    // –ü–æ–≤—Ç–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è
    redo() {
        if (this.currentIndex < this.history.length - 1) {
            this.currentIndex++;
            this.history[this.currentIndex].redo();
            this.showNotification('–î–µ–π—Å—Ç–≤–∏–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–æ', 'info');
            this.updateUndoRedoStatus();
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
    initUndoRedo() {
        document.addEventListener('keydown', (e) => {
            // Ctrl/Cmd + Z - –æ—Ç–º–µ–Ω–∞
            if ((e.ctrlKey || e.metaKey) && e.key === 'z' && !e.shiftKey) {
                e.preventDefault();
                this.undo();
            }
            
            // Ctrl/Cmd + Shift + Z –∏–ª–∏ Ctrl/Cmd + Y - –ø–æ–≤—Ç–æ—Ä
            if ((e.ctrlKey || e.metaKey) && ((e.key === 'z' && e.shiftKey) || e.key === 'y')) {
                e.preventDefault();
                this.redo();
            }
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        this.createUndoRedoIndicator();
    }

    // –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
    createUndoRedoIndicator() {
        const indicator = document.createElement('div');
        indicator.className = 'undo-redo-status';
        indicator.innerHTML = `
            <button class="undo-btn" onclick="window.ordersManager.undo()" disabled>‚Ü© –û—Ç–º–µ–Ω–∏—Ç—å</button>
            <button class="redo-btn" onclick="window.ordersManager.redo()" disabled>‚Ü™ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å</button>
        `;
        document.body.appendChild(indicator);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    updateUndoRedoStatus() {
        const undoBtn = document.querySelector('.undo-btn');
        const redoBtn = document.querySelector('.redo-btn');
        
        if (undoBtn && redoBtn) {
            undoBtn.disabled = this.currentIndex < 0;
            redoBtn.disabled = this.currentIndex >= this.history.length - 1;
            
            undoBtn.style.opacity = undoBtn.disabled ? '0.5' : '1';
            redoBtn.style.opacity = redoBtn.disabled ? '0.5' : '1';
        }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —è—á–µ–π–∫–∏
    handleCellEdit(cell, newValue) {
        const row = cell.closest('tr');
        const index = parseInt(row.dataset.index);
        const key = cell.dataset.key;
        
        if (index >= 0 && key) {
            const oldOrder = { ...this.orders[index] };
            const newOrder = { ...oldOrder, [key]: newValue };
            
            const action = {
                do: (manager) => {
                    manager.orders[index] = newOrder;
                    manager.saveOrders();
                },
                undo: (manager) => {
                    manager.orders[index] = oldOrder;
                    manager.saveOrders();
                }
            };
            
            action.do(this);
            this.addToHistory(action);
            this.renderTable();
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–Ω–∏–º–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    createSnapshot() {
        return JSON.parse(JSON.stringify(this.orders));
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    restoreSnapshot(snapshot) {
        this.orders = JSON.parse(JSON.stringify(snapshot));
        this.saveOrders();
        this.renderTable();
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
    async loadFromDataFile() {
        try {
            const response = await fetch('data/orders.json');
            if (!response.ok) {
                console.warn('–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π');
                this.orders = [];
                this.columnsOrder = Array.from(
                    { length: document.querySelectorAll('.header-row th').length - 1 }, 
                    (_, i) => i.toString()
                );
                return;
            }
            const data = await response.json();
            this.orders = data.orders || [];
            this.columnsOrder = data.columnsOrder || [];
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö', 'error');
        }
    }

    // –ò–∑–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    async saveOrders() {
        try {
            const saveData = {
                orders: this.orders,
                columnsOrder: this.columnsOrder
            };

            const response = await fetch('/api/save', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(saveData)
            });

            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏');
            }

            this.lastSaveTime = new Date();
            this.updateSaveStatus('–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:', error);
            this.updateSaveStatus('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è', 'error');
            this.showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö', 'error');
        }
    }
}

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Excel
const ExcelExporter = {
    // –î–æ–±–∞–≤–ª—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    headers: {
        'status': '–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞',
        'author': '–ê–≤—Ç–æ—Ä –∑–∞—è–≤–∫–∏',
        'material': '–ú–∞—Ç–µ—Ä–∏–∞–ª',
        'priority': '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç',
        'quantity': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
        'unit': '–ï–¥. –∏–∑–º.',
        'category': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞',
        'supplier': '–ü–æ—Å—Ç–∞–≤—â–∏–∫',
        'phone': '–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞',
        'email': 'Email –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞',
        'orderDate': '–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞',
        'paymentDate': '–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã',
        'deliveryDate': '–î–∞—Ç–∞ –ø—Ä–∏–≤–æ–∑–∞',
        'deliveryType': '–í–∏–¥ –¥–æ—Å—Ç–∞–≤–∫–∏',
        'amount': '–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞',
        'paymentStatus': '–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø–ª–∞—Ç—ã',
        'notes': '–ü—Ä–∏–º–µ—á–∞–Ω–∏—è',
        'responsible': '–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ª–∏—Ü–æ',
        'link': '–°—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã'
    },

    export(orders) {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Ä—É—Å—Å–∫–∏–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        const translatedOrders = orders.map(order => {
            const translatedOrder = {};
            Object.entries(order).forEach(([key, value]) => {
                if (this.headers[key]) {
                    translatedOrder[this.headers[key]] = value;
                }
            });
            return translatedOrder;
        });

        // –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–∏—Å—Ç
        const worksheet = XLSX.utils.json_to_sheet(translatedOrders);

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
        const columnWidths = Object.values(this.headers).map(header => ({
            wch: Math.max(header.length * 1.5, 15)
        }));
        worksheet['!cols'] = columnWidths;

        // –°–æ–∑–¥–∞–µ–º –∫–Ω–∏–≥—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ª–∏—Å—Ç
        const workbook = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(workbook, worksheet, '–ó–∞—è–≤–∫–∏');

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        const date = new Date().toLocaleDateString('ru-RU').replace(/\./g, '-');
        XLSX.writeFile(workbook, `–ó–∞—è–≤–∫–∏_${date}.xlsx`);
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã
function applyTheme(theme) {
    document.documentElement.setAttribute('data-theme', theme || 'light');
    const themeToggle = document.getElementById('themeToggle');
    if (themeToggle) {
        themeToggle.textContent = theme === 'dark' ? '‚òÄÔ∏è' : 'üåô';
    }
}

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
function initializeApp() {
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É
    const savedTheme = localStorage.getItem(THEME_KEY) || 'light';
    applyTheme(savedTheme);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–∫–∞–∑–æ–≤
    window.ordersManager = new OrdersManager();
}

// –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', () => {
    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        const headers = document.querySelectorAll('.header-row th');
        headers.forEach((th, index) => {
            th.setAttribute('data-original-index', index.toString());
        });

        // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        initializeApp();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
window.onerror = function(msg, url, line, col, error) {
    console.error('–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', {
        message: msg,
        url: url,
        line: line,
        column: col,
        error: error
    });
    return false;
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ HTML
window.toggleTheme = () => {
    const currentTheme = document.documentElement.getAttribute('data-theme') || 'light';
    const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
    applyTheme(newTheme);
    localStorage.setItem(THEME_KEY, newTheme);
};

window.toggleForm = () => {
    const dialog = document.getElementById('addOrderForm');
    if (dialog.open) {
        dialog.close();
    } else {
        dialog.showModal();
    }
};

window.exportToExcel = () => {
    if (window.ordersManager) {
        window.ordersManager.exportToExcel();
    }
};

window.saveOrder = () => {
    if (window.ordersManager) {
        window.ordersManager.handleFormSubmit();
    }
};

window.sortTable = (columnIndex) => {
    if (window.ordersManager) {
        window.ordersManager.sortTable(columnIndex);
    }
};

window.saveToFile = () => {
    if (window.ordersManager) {
        window.ordersManager.saveToFile();
    }
};

window.loadFromFile = (input) => {
    if (!input.files || !input.files[0]) return;
    
    const file = input.files[0];
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–∞
    if (file.size > 5 * 1024 * 1024) {
        alert('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä 5MB');
        input.value = '';
        return;
    }

    if (!file.type.includes('json') && !file.name.endsWith('.json')) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ JSON —Ñ–∞–π–ª');
        input.value = '';
        return;
    }

    if (window.ordersManager) {
        window.ordersManager.loadFromFile(file);
    }
    input.value = '';
};

window.applyFilters = () => {
    if (window.ordersManager) {
        window.ordersManager.applyFilters();
    }
};

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
async function saveData() {
  try {
    const response = await fetch('/api/save', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        orders: orders,
        columnsOrder: columnsOrder
      })
    });

    const result = await response.json();
    
    if (!response.ok) {
      throw new Error(result.error || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
    }

    showNotification('–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'success');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
    showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ' + error.message, 'error');
  }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
async function loadData() {
  try {
    const response = await fetch('/api/data');
    const data = await response.json();
    
    if (!response.ok) {
      throw new Error(data.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
    }

    if (data.orders) {
      orders = data.orders;
    }
    if (data.columnsOrder) {
      columnsOrder = data.columnsOrder;
    }

    renderOrders();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
    showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ' + error.message, 'error');
  }
}

// –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
function onDataChanged() {
  saveData();
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
document.addEventListener('DOMContentLoaded', loadData);

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
document.getElementById('saveButton').addEventListener('click', saveData);
document.getElementById('loadButton').addEventListener('click', loadData);

// ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ ...